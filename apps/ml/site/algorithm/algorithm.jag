<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WSO2 Machine Learner</title>
    <link rel="icon" href="../../images/favicon.png" type="image/x-icon" />
    <link href="../../css/bootstrap.css" rel="stylesheet">
    <link href="../../css/custom.css" rel="stylesheet">
    <link href="../../css/custom-theme.css" rel="stylesheet">
    <script src="../../js/respond.min.js"></script>

    <%
include("../../includes/tenantAware.jag");
%>
</head>

<body>

<div class="container col-lg-12 col-md-12 col-sm-12">

<!-- header -->
<header>
<div class="row wr-global-header">
<div class="col-sm-8 app-logo"><img src="../../images/logo.png" /><h2 class="app-title">Machine Learner</h2>
</div>
<div class="col-sm-4">
    <div class="wr-auth pull-right">
        <a href="#" data-toggle="dropdown" class="cu-ico-right-button cu-ico-button-user"><% print(session.get("logged.user")); %></a>
            <div class="dropdown-menu">
                <div class="cu-arrow"></div>
                <div class="dropdown-menu-content">
                    <a href="../logout/logout.jag" id="log-out" class="filter-item">Logout</a>
                </div>
            </div>          
        </div>
    </div>
</div>
</header>
<!-- /header -->

<!-- secondary header - app bar -->
<div id="nav" class="row wr-app-bar">
    <div class="col-md-9 wr-action-container">
        <div class="wr-project">
            <span class="title">PROJECTS \ </span><span id="nav-project"></span><span id="nav-analysis"></span>
        </div>

        <div class="wr-action-btn-bar">
            <a href="#" class="cu-btn btn-cancel" id="cancel-analysis">Cancel</a>
        </div>
    </div>

    <div class="col-md-3 wr-wiz-nav">
        <div class="wr-secondary-links pull-right">
            <div class="ctrl-wiz-nav">
                <a href="#" id="prev-btn" class="cu-btn btn-prev">Previous</a>
                <a href="#" id="btn-next" class="cu-btn-reverse btn-next">Next</a>
            </div>
        </div>
    </div>
</div>
<!-- secondary header - app bar -->

<!-- content/body -->
<div class="row">
    <div class="col-lg-12 wr-secondary-bar">
        
        <!-- Wizard -->
        <ul class="nav nav-pills nav-wizard">
            <li class="tab-link-disabled"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 1</span>Preprocess</a><div class="nav-arrow"></div></li>
            <li class="tab-link-disabled"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 2</span>Explore</a><div class="nav-arrow"></div></li>
            <li class="active tab-link-disabled"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 3</span>Algorithms</a><div class="nav-arrow"></div></li>
            <li class="tab-link-disabled"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 4</span>Parameters</a><div class="nav-arrow"></div></li>
            <li class="tab-link-disabled"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 5</span>Model</a><div class="nav-arrow"></div></li>
        </ul>
    </div>
</div>


<div class="row">
    <div class="col-md-12">
        

        <!-- content -->
        <div class="container col-md-12 col-centered wr-content">

            <div id="notification-area"></div>
            <div class="wr-form col-lg-5 col-centered">

                <h1 class="title">Algorithm</h1>

                <label class="input-label">Algorithm name<span class="glyphicon"></span></label>
        <span class="fld-required">*</span>
                <div class="input-control text">
                    <select id="algorithm-name" class="form-control">
                        <optgroup label="Numerical Prediction">
                            <option value="LINEAR_REGRESSION">LINEAR REGRESSION</option>
                            <option value="RIDGE_REGRESSION">RIDGE REGRESSION</option>
                            <option value="LASSO_REGRESSION">LASSO REGRESSION</option>
                        </optgroup>                        
                        <optgroup label="Binary Classification">
                            <option value="LOGISTIC_REGRESSION">LOGISTIC REGRESSION SGD</option>
                            <option value="SVM">SVM</option>
                        </optgroup>
                        <optgroup label="Multiclass Classification">
                        <option value="LOGISTIC_REGRESSION_LBFGS">LOGISTIC REGRESSION L-BFGS</option>
                            <option value="DECISION_TREE">DECISION TREE</option>
                            <option value="RANDOM_FOREST">RANDOM FOREST</option>
                            <option value="NAIVE_BAYES">NAIVE BAYES</option>
                        </optgroup>                        
                        <optgroup label="Clustering">
                            <option value="K_MEANS">K-MEANS</option>
                        </optgroup>
                        <optgroup label="Anomaly Detection">
                            <option value="K_MEANS_ANOMALY_DETECTION_WITH_UNLABELED_DATA">K-MEANS WITH UNLABELED DATA</option>
                            <option value="K_MEANS_ANOMALY_DETECTION_WITH_LABELED_DATA">K-MEANS WITH LABELED DATA</option>
                        </optgroup>
                    </select>
                </div>

                <div class="spcr-2"></div>

            <!--    <div id="method-selection">
                     <label class="input-label-sm">Training Method<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
                       <div class="wr-filter-radio-group">
                         <label class='radio' id='training-method'>

                         <input type='radio' value='unsupervised' name='options' checked>Unsupervised</br>
                         <input type='radio' value='supervised' name='options'>Supervised

                         </label>
                        </div>
                </div>

                <br class="c-both" /> -->

                <div id="response-variable-field">
                    <label class="input-label">Response variable<span class="glyphicon"></span></label>
            <span class="fld-required">*</span>
                    <div class="input-control text">
                        <select id="response-variable" class="form-control">
                        </select>
                    </div>
                    <div class="spcr-2"></div>                
                </div>

                <!-- <div id="normal-labels">
                <label class="input-label">Normal Label(s) Values<span class="glyphicon"></span></label>
                <div class="input-control text">
                    <input type="text" id="lable-names" placeholder="normal label(s) values"/>
                </div>
                </div> -->

                <div id="normal-labels">
                    <label class="input-label-sm">Normal Label(s) Values<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
                    <div id="lable-names" class="wr-filter-radio-group">
                    </div>
                    <div class="spcr-2"></div>
                </div> 
                

                <div id="train-data-fraction">
                <label class="input-label">Train data fraction<span class="glyphicon"></span></label>
                <div class="input-control text">
                    <input type="text" id="data-fraction" value="0.7" placeholder="input text"/>
                </div>

                </div>

                <div class="wr-filter-radio-group" id="normalization">
                <label class="checkbox">
                   <input type='checkbox' id="normalization-value" name='option' value='normalize' checked>Normalize Data</br>
                </label>
                <div class="spcr-2"></div>
                </div>
                

            </div>

        </div>

    </div>
            <!-- /content -->
</div>
<!-- /content/body -->

</div>
    
<!--footer class="footer">
        <p>&copy; 2014 WSO2 Inc. All Rights Reserved</p>
</footer-->

<script src="../../js/jquery-1.11.1.min.js"></script>
<script src="../../js/bootstrap.min.js"></script>
<script src="../../js/wso2.ml.util.js"></script>



<script type="text/javascript">

var serverUrl = window.location.origin;

var projectName = getParameterByName('projectName');
var analysisName = getParameterByName('analysisName');
var analysisId = getParameterByName('analysisId');
var datasetId = getParameterByName('datasetId');
var fromAnalysis = getParameterByName('fromAnalysis')
var notificationArea = $('#notification-area');

$( document ).ready(function() {

    $('#nav').affix({
          offset: {
            top: $('header').height()
          }
    });
    
    //scrollVibrateFix();
    
    $(window).resize(function() {
        scrollVibrateFix();
    });



    // set previously selected values when navigating from next page
    var setResponseVariable = "";    
    // get previously set response variable
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/analyses/" + analysisId + "/responseVariables",
        async : false,
        dataType: 'text',
        success: function(res) {
            setResponseVariable = sanitize(res);
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, notificationArea, 'warning');
        }
    });

    // function that load dataset features
    function loadDatasetFeatures(setResponseVariable) {
        $.ajax({
            type: "GET",
            url: serverUrl+"/api/analyses/"+analysisId+"/filteredFeatures?featureType=CATEGORICAL",
            success: function(res) {
                var categoricalFeatureNames = res;
                $.each(categoricalFeatureNames,function(index, feature){
                    $('#response-variable').append($('<option>', {
                        value: sanitize(feature),
                        text : sanitize(feature)
                    }));
                });
            // set previously selected values when navigating from next page
            if (setResponseVariable != '') {
                $('#response-variable option[value=' + setResponseVariable + ']').attr('selected','selected');
            }
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, notificationArea, 'warning');
        }
    });
    }


    loadDatasetFeatures(setResponseVariable);
    getNormalLabelValues();
    // get previously set algorithm name
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/analyses/" + analysisId + "/algorithmName",
        async : false,
        dataType: 'text',
        success: function(res) {
            var setAlgorithmName = sanitize(res);
            if (setAlgorithmName != '') {
                $('#algorithm-name option[value=' + setAlgorithmName + ']').attr('selected','selected');
            }
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, notificationArea, 'warning');
        }
    });
    // get previously set train data fraction
    $.ajax({
        type: "GET",
        url: serverUrl+"/api/analyses/"+analysisId+"/trainDataFraction",
        async : false,
        dataType: 'text',
        success: function(res) {
            var setTrainDataFraction = sanitize(res);
            if (setTrainDataFraction >= 0) {
                $('#data-fraction').val(setTrainDataFraction);
            }
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, notificationArea, 'warning');
        }
    });

    //ashen
    // get previously set normal labels
    $.ajax({
        type: "GET",
        url: serverUrl+"/api/analyses/"+analysisId+"/normalLabels",
        async : false,
        dataType: 'text',
        success: function(res) {
            var setNormalLabels = sanitize(res);
            //var lb = JSON.parse(setNormalLabels);
            console.log(setNormalLabels);
            var labelArray = setNormalLabels.split(',');
            console.log(labelArray);
            
            for(var i=0; i<labelArray.length; i++){
                
                $("input:checkbox[name=labels]").each(function(){
                    if($(this).val() == labelArray[i]) {
                    $(this).prop('checked',true);
                }
                });
            }
            //avoiding allways checking the 1st value
            var temp = 0;
            $("input:checkbox[name=labels]:checked").each(function(){
                for(var i=0; i<labelArray.length; i++){
                    if($(this).val() == labelArray[i]) {
                        temp = 1;
                    }
                }
                if(temp == 0){
                    $(this).prop('checked',false);
                }
            });    
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, notificationArea, 'warning');
        }
    });
    
       // get previously set normalization option
    $.ajax({
        type: "GET",
        url: serverUrl+"/api/analyses/"+analysisId+"/normalization",
        async : false,
        dataType: 'text',
        success: function(res) {
            var setNormalization = sanitize(res);
            console.log(setNormalization);
            if (setNormalization == 'true') {
                $('#normalization-value').prop('checked',true);
            }else if (setNormalization == 'false'){
                $('#normalization-value').prop('checked',false);
            }

        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, notificationArea, 'warning');
        }
    });

    
        
    // put path in application navigator
    $('#nav-project').text(projectName);
    $('#nav-analysis').text(" \\ "+analysisName);

    // disable fields if the model is built from an existing analysis
    if(fromAnalysis == 'true') {
        $('#algorithm-name').attr("disabled","disabled");
        $('#response-variable').attr("disabled","disabled");
        $('#data-fraction').attr("disabled","disabled");
        $('#labels-names').attr("disabled","disabled");
        $('#normalization-value').attr("disabled","disabled");
    }

    //hide unwanted fields when loading the page
    document.body.onload = function() {

        if($('#algorithm-name').val() == 'K_MEANS') {
            $('#response-variable-field').hide();
            $('#normal-labels').hide();
            $('#normalization').hide();
        }
        else if($('#algorithm-name').val() == 'K_MEANS_ANOMALY_DETECTION_WITH_UNLABELED_DATA'){
            $('#response-variable-field').hide();
            $('#normal-labels').hide();
            $('#train-data-fraction').hide();
            $('#normalization').show();
        }
        else if($('#algorithm-name').val() == 'K_MEANS_ANOMALY_DETECTION_WITH_LABELED_DATA'){
            $('#response-variable-field').show();
            $('#normal-labels').show();
            $('#train-data-fraction').show();
            $('#normalization').show();
        }
        else{
            $('#response-variable-field').show();
            $('#normal-labels').hide();
            $('#train-data-fraction').show();
            $('#normalization').hide();
        }

    };

    // hides response variable field for K-Means algorithm
    $(document).on('change','#algorithm-name',function() {
        if($('#algorithm-name').val() == 'K_MEANS') {
            $('#response-variable-field').hide();
            $('#normal-labels').hide();
            $('#normalization').hide();
            $('#train-data-fraction').hide();
        }
        else if($('#algorithm-name').val() == 'K_MEANS_ANOMALY_DETECTION_WITH_UNLABELED_DATA'){
            $('#response-variable-field').hide();
            $('#normal-labels').hide();
            $('#train-data-fraction').hide();
            $('#normalization').show();
        }
        else if($('#algorithm-name').val() == 'K_MEANS_ANOMALY_DETECTION_WITH_LABELED_DATA'){
            $('#response-variable-field').show();
            $('#normal-labels').show();
            $('#train-data-fraction').show();
            $('#normalization').show();
        }
        else{
            $('#response-variable-field').show();
            $('#normal-labels').hide();
            $('#normalization').hide();
            $('#train-data-fraction').show();
        }
    });

    $(document).on('change','#response-variable',function() {
        getNormalLabelValues();
    });

    // change options according to anomaly detection training method
 /*   $(document).on('change','#training-method',function() {
        if($("input[name='options']:checked").val() == 'supervised') {
            $('#response-variable-field').show();
            $('#normal-labels').show();
            $('#train-data-fraction').show();
        }
        else{
            $('#response-variable-field').hide();
            $('#normal-labels').hide();
            $('#train-data-fraction').hide();

        }
    }); */
    
    $('#prev-btn').on('click', function(e){
        e.preventDefault();

        window.location.href = '../explore/explore.jag?projectName=' + projectName + '&analysisName=' + analysisName + '&datasetId=' + datasetId + '&fromAnalysis=' + fromAnalysis;
    });

    $('#btn-next').on('click', function(e){
        e.preventDefault();
        
        var algorithmName = $('#algorithm-name').val();

        var responseVariable;
        if($('#response-variable-field').is(":hidden")){
            responseVariable = '';
        }else{
            responseVariable = $('#response-variable').val().replace(/"/g,"\\\"");
        }

        //ashen
        var normalLabels = new Array();
        
        $("input:checkbox[name=labels]:checked").each(function(){
            normalLabels.push($(this).val());
        });
           

        var normalization;

        if($('#normalization-value').is(":checked")) {
            normalization = 'true';
        }
        else{
            normalization = 'false';
        }

        var trainDataFraction;
        if($('#train-data-fraction').is(":hidden")){
            trainDataFraction = '1.0';
        }else{
            trainDataFraction = $('#data-fraction').val();
        }

        var algorithmType;

        if (algorithmName == 'LINEAR_REGRESSION' || algorithmName == 'RIDGE_REGRESSION' || algorithmName == 'LASSO_REGRESSION') {
            algorithmType = 'Numerical_Prediction';
        }
        else if (algorithmName == 'LOGISTIC_REGRESSION' || algorithmName == 'LOGISTIC_REGRESSION_LBFGS' || algorithmName == 'SVM' || algorithmName == 'DECISION_TREE' || algorithmName == 'RANDOM_FOREST' || algorithmName == 'NAIVE_BAYES') {
            algorithmType = 'Classification';
        }
        else if (algorithmName == 'K_MEANS') {
            algorithmType = 'Clustering';            
        }
        else if (algorithmName == 'K_MEANS_ANOMALY_DETECTION_WITH_UNLABELED_DATA') {
            algorithmType = 'Anomaly_Detection';
        }
        else if (algorithmName == 'K_MEANS_ANOMALY_DETECTION_WITH_LABELED_DATA') {
            algorithmType = 'Anomaly_Detection';
        }

        // set model configurations for this analysis        
        var jsonData = '[{ "key":"algorithmName","value":"'+algorithmName+'"},{"key":"algorithmType","value":"'+algorithmType+'"},{"key":"responseVariable","value":"'+responseVariable+'"},{"key":"trainDataFraction","value":"'+trainDataFraction+'"},{"key":"normalLabels","value":"'+normalLabels+'"},{"key":"normalization","value":"'+normalization+'"}]';
        $.ajax({
            type: 'POST',
            url: serverUrl + "/api/analyses/" + analysisId + "/configurations",
            contentType: "application/json",
            data: jsonData,
            success: function(res){
                window.location.href = '../parameters/parameters.jag?analysisId=' + analysisId + '&projectName=' + projectName + '&analysisName=' + analysisName + '&algorithmName=' + algorithmName + '&algorithmType=' + algorithmType + '&datasetId=' + datasetId + '&fromAnalysis=' + fromAnalysis;
            },
            error: function(res){
                var errorText = res.responseText
                handleNotification(errorText, notificationArea, 'warning');
            }
        });
    });

    // function that cancels an analysis
    $('#cancel-analysis').on('click', function(e){
        e.preventDefault();
        // if navigation is from analysis page do not delete the analysis
        if (fromAnalysis == 'true') {
            window.location.href = '../analysis/analysis.jag?analysisId='+analysisId+'&datasetId='+datasetId+'&projectName='+projectName+'&analysisName='+analysisName;
        }
        else {
            var noOfModels;
            // get number of models of this analysis
            $.ajax({
                type: 'GET',
                url: serverUrl + "/api/analyses/" + analysisId + "/models",
                async: false,
                success: function(res) {
                    noOfModels = res.length;
                },
                error: function(res){
                    var errorText = res.responseText
                    handleNotification(errorText, '#notification-area', 'warning');
                }
            });
            // delete analysis on CANCEL only if there are no models in this analysis
            if(noOfModels == 0) {                
                $.ajax({
                    type: 'DELETE',
                    url: serverUrl + "/api/analyses/" + analysisId,
                    success: function(res){
                        window.location.href = '../project/projects.jag';
                    },
                    error: function(res){
                        var errorText = res.responseText
                        handleNotification(errorText, '#notification-area', 'warning');
                    }
                });                            
            }
            else {
                window.location.href = '../project/projects.jag';
            }
        }        
    });
}); 



function getNormalLabelValues() {

    $.ajax({
    type: "GET",
    url: serverUrl + "/api/analyses/" + analysisId + "/summarizedFeatures?limit=0&offset=0",        
    async: false,
    success : function(res){  
        var features = res;
        console.log(features);

        console.log(features);
        var nm = $('#response-variable option:selected').text();
        console.log(nm)
        for(var i=0; i<features.length; i++){
        
        if($('#response-variable option:selected').text() == features[i].fieldName){
                     
            var jsonObj = JSON.parse(features[i]["summaryStats"]);  
            var values = jsonObj[0]["values"];

         //console.log(jsonObj[0]["values"][0][0]);

            $('#lable-names').empty();
            for(var index=0; index<values.length; index++){
            // first 4 categorical features are plotted by default
            if (index < 1){
                $('#lable-names').append("<label class='checkbox'><input type='checkbox' name='labels' class='numericalFeatureNames' value='" + values[index][0].trim().replace(/"/g,"\\\"") + "' checked>" + values[index][0] + "</label>");
            }
            else {
                $('#lable-names').append("<label class='checkbox'><input type='checkbox' name='labels' class='numericalFeatureNames' value='" + values[index][0].trim().replace(/"/g,"\\\"") + "'>" + values[index][0] + "</label>");
            }
        }

       
        }
    }
  },

    error : function(res){
        var errorText = res.responseText
        handleNotification(errorText, '#notification-area', 'warning');
    }
});

}

</script>

</body>
</html>
