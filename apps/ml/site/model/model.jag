<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WSO2 Machine Learner</title>
    <link rel="icon" href="../../images/favicon.png" type="image/x-icon" />
    <link href="../../css/bootstrap.css" rel="stylesheet">
    <link href="../../css/custom.css" rel="stylesheet">
    <link href="../../css/custom-theme.css" rel="stylesheet">
    
    <link rel="stylesheet" type="text/css" href="../../css/d3.parsets.css">
    <link rel="stylesheet" type="text/css" href="../../css/data.css">
    <link rel="stylesheet" type="text/css" href="../../css/wso2.ml.graphs.css">
    <link rel="stylesheet" type="text/css" href="../../css/nv.d3.min.css">
    
    <script src="../../js/respond.min.js"></script>
	<script src="../../js/d3.v3.min.js"></script>
    <script src="../../js/d3.js"></script>
    <script src="../../js/nv.d3.js"></script>
    <script src="../../js/wso2.ml.graphs.js"></script>
    <%
        include("../../includes/tenantAware.jag");
    %> 
</head>

<body>

<div class="container col-lg-12 col-md-12 col-sm-12">

<!-- header -->
<header>
<div class="row wr-global-header">
	<div class="col-sm-8 app-logo"><img src="../../images/logo.png" /><h2 class="app-title">Machine Learner</h2>
	</div>
	<div class="col-sm-4">
		<div class="wr-auth pull-right">
			<a href="#" data-toggle="dropdown" class="cu-ico-right-button cu-ico-button-user"><% print(session.get("logged.user")); %></a>
			<div class="dropdown-menu">
				<div class="cu-arrow"></div>
				<div class="dropdown-menu-content">
					<a href="../logout/logout.jag" id="log-out" class="filter-item">Logout</a>
				</div>
			</div>			
		</div>
	</div>
</div>
</header>
<!-- /header -->

<!-- secondary header - app bar -->
<div id="nav" class="row wr-app-bar">
	<div class="col-md-9 wr-action-container">
		<div class="wr-project">
            <span class="title">PROJECTS \ </span><span id="nav-project"></span><span id="nav-analysis"></span>
        </div>

		<div class="wr-action-btn-bar">
			<a href="#" class="cu-btn btn-cancel" id="cancel-analysis">Cancel</a>
		</div>
	</div>

	<div class="col-md-3 wr-wiz-nav">
		<div class="wr-secondary-links pull-right">
            <div class="ctrl-wiz-nav">
    			<a href="#" id="prev-btn" class="cu-btn btn-prev">Previous</a>
    			<a href="#" id="btn-next" class="cu-btn-reverse btn-run">Run</a>
    		</div>
        </div>
	</div>
</div>
<!-- secondary header - app bar -->


<!-- content/body -->
<div class="row">
	<div class="col-lg-12 wr-secondary-bar">
		
		<!-- Wizard -->
	    <ul class="nav nav-pills nav-wizard">
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 1</span>Preprocess</a><div class="nav-arrow"></div></li>
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 2</span>Explore</a><div class="nav-arrow"></div></li>
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 3</span>Algorithms</a><div class="nav-arrow"></div></li>
            <li><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 4</span>Parameters</a><div class="nav-arrow"></div></li>
            <li class="active"><div class="nav-wedge"></div><a href="#" data-toggle="tab"><span class="nav-wedge-step">Step 5</span>Model</a><div class="nav-arrow"></div></li>
        </ul>
	</div>
</div>


<div class="row">
	<div class="col-md-12">
		

		<!-- content -->
		<div class="container col-md-12 col-centered wr-content">

            <div id="notification-area"></div>
			<div class="wr-form col-lg-5 col-centered">

				<h1 class="title">Model</h1>

				<label class="input-label">Dataset version<span class="glyphicon"></span></label>
                <div class="input-control text">
                    <select id="dataset-version" class="form-control">
                        <!-- <option>Select..</option> -->
                    </select>
                </div>

			</div>
			
		<!-- /content -->		
		</div>
		<div class="container col-md-12 col-centered wr-content">				          
                <div class="wr-form col-lg-5 col-centered">                
                    <h1 class="title">Deep Network Visualization</h1>                                        
                    <div class="spcr-2"></div>
                    <!--  <div class="wr-graph-img"> -->
                        <div id="dl-network"></div>
                    <!--  </div>-->
                </div>
            </div>

	</div>
	
</div>
<!-- /content/body -->

</div>
    
<!--footer class="footer">
        <p>&copy; 2014 WSO2 Inc. All Rights Reserved</p>
</footer-->

<script src="../../js/jquery-1.11.1.min.js"></script>
<script src="../../js/bootstrap.min.js"></script>
<script src="../../js/wso2.ml.util.js"></script>

<script src="../../js/d3.v3.min.js" charset="utf-8"></script>
<script src="../../js/jquery.dataTables.js"></script>

<script src="../../js/d3.parsets.js"></script>
<script src="../../js/figue.js"></script>

<script type="text/javascript">

var serverUrl = window.location.origin;

var projectName = getParameterByName('projectName');
var analysisName = getParameterByName('analysisName');
var analysisId = getParameterByName('analysisId');
var datasetId = getParameterByName('datasetId');
var algorithmName = getParameterByName('algorithmName');
var algorithmType = getParameterByName('algorithmType');
var fromAnalysis = getParameterByName('fromAnalysis');

$( document ).ready(function() {

	$('#nav').affix({
	      offset: {
	        top: $('header').height()
	      }
	});

    // put path in application navigator    
    $('#nav-project').text(projectName);
    $('#nav-analysis').text(" \\ "+analysisName);    

    $('#prev-btn').on('click', function(e){
        e.preventDefault();
        window.location.href = '../parameters/parameters.jag?analysisId=' + analysisId + '&projectName=' + projectName + '&analysisName=' + analysisName + '&algorithmName=' + algorithmName + '&algorithmType=' + algorithmType + '&datasetId=' + datasetId + '&fromAnalysis=' + fromAnalysis;
    });    
    
    loadDatasetVersions();

    if (algorithmName == 'STACKED_AUTOENCODERS') {
		loadInputFeaturesCountAndCreateDeepNetwork();
    } else {    	
		$("#dl-network").closest("div.wr-content").remove();
		//$("#col-md-12 col-centered wr-graph-content").children().remove();
    }
    
    
    $('#btn-next').on('click', function(e){
    	e.preventDefault();
    	
    	var modelName;
    	var datasetVersion = $('#dataset-version').val();

    	jsonData = '{"analysisId":"' + analysisId + '","versionSetId":"' + datasetVersion + '"}';

        // create model
	    $.ajax({
            type: 'POST',
            url: serverUrl + "/api/models",
            async: false,
            contentType: "application/json",
            data: jsonData,
            success: function(res){
                modelName = sanitize(res['name']);
            },
            error: function(res){
                var errorText = res.responseText
                handleNotification(errorText, '#notification-area', 'warning');
            }
        });

        var modelId;

        // get model ID        
        $.ajax({
            type: 'GET',
            url: serverUrl + "/api/models/" + modelName,
            async: false,
            success: function(res){
                modelId = res['id'];
            },
            error: function(res){
                var errorText = res.responseText
                handleNotification(errorText, '#notification-area', 'warning');
            }
        });

        // submit model build job
        $.ajax({
            type: 'POST',
            url: serverUrl + "/api/models/" + modelId,
            success: function(res){
                console.log("Model build job successfully submitted.");
                window.location.href = '../analysis/analysis.jag?analysisId=' + analysisId + '&analysisName=' + analysisName + '&projectName=' + projectName + '&datasetId=' + datasetId;
            },
            error: function(res){
                var errorText = res.responseText
                handleNotification(errorText, '#notification-area', 'warning');
            }
        });

    });

    // function that cancels an analysis
    $('#cancel-analysis').on('click', function(e){
        e.preventDefault();
        // if navigation is from analysis page do not delete the analysis
        if (fromAnalysis == 'true') {
            window.location.href = '../analysis/analysis.jag?analysisId=' + analysisId + '&datasetId=' + datasetId + '&projectName=' + projectName + '&analysisName=' + analysisName;
        }
        else {
            $.ajax({
                type: 'DELETE',
                url: serverUrl + "/api/analyses/" + analysisId,
                success: function(res){
                    window.location.href = '../project/projects.jag';
                },
                error: function(res){
                var errorText = res.responseText
                    handleNotification(errorText, '#notification-area', 'warning');
                }
            });
        }
    });
});

function loadDatasetVersions() {
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/datasets/" + datasetId + "/versions",
        success: function(res) {
            var datasetVersions = res;
            $.each(datasetVersions, function (i, item) {
                $('#dataset-version').append($('<option>', { 
                    value: item.id,
                    text : item.name
                }));
            });
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, '#notification-area', 'warning');            
        }
    });
}

function loadInputFeaturesCountAndCreateDeepNetwork() {
	var featuresCount = -1;
	var responseVariable = "";
	var classCount = -1;
	var hidLayerArr = [];

	
	
	$.ajax({
    	type: "GET",
    	url: serverUrl+"/api/analyses/"+analysisId+"/features",
    	async : false,
    	dataType: 'json',
    	success: function(res) {
        	var featuresSet = res;
        	featuresCount = featuresSet.length;	    				    		    		    		 	            
    	},
    	error: function(res) {
        	var errorText = res.responseText;
        	handleNotification(errorText, '#notification-area', 'warning');
    	}
	});	

	$.ajax({
    	type: "GET",
    	url: serverUrl+"/api/analyses/"+analysisId+"/hyperParameters",
    	async : false,
    	dataType: 'json',
    	success: function(res) {        	
    		var hidLayerText = "";
        	for(var i = 0; i < res.length; i++){
				if(res[i]["key"]=="Layer_Sizes"){
					hidLayerText = res[i]["value"];
					break;
				}
            }
        	
        	var hidLayerTokens = hidLayerText.split(",");	    		
        	for(var i=0; i<hidLayerTokens.length; i++){
        		hidLayerArr[i] = parseInt(hidLayerTokens[i]);
        	}				    		    		    		 	            
    	},
    	error: function(res) {
        	var errorText = res.responseText;
        	handleNotification(errorText, '#notification-area', 'warning');
    	}
	});	
	
	$.ajax({
    	type: "GET",
    	url: serverUrl+"/api/analyses/"+analysisId+"/responseVariables",
    	async : false,
    	dataType: 'text',
    	success: function(res) {
    		responseVariable = res;  			    	        		           
    	},
    	error: function(res) {
        	var errorText = res.responseText;
        	handleNotification(errorText, '#notification-area', 'warning');	                	
    	}
	});
	
	$.ajax({
    	type: "GET",
    	url: serverUrl+"/api/datasets/"+datasetId+"/stats?feature="+responseVariable,
    	async : false,
    	dataType: 'json',
    	success: function(res3) {
        	classCount = res3[0]["unique"];	        	
			drawDLNetwork("#dl-network",featuresCount,hidLayerArr,classCount); 	            
    	},
    	error: function(res3) {
        	var errorText = res3.responseText;
        	handleNotification(errorText, '#notification-area', 'warning');	                	
    	}
	});	  
		    
}

function drawDLNetwork (cssClass, inCount, hiddenCounts, outCount) {
	d3.select(cssClass).attr("align","center");
	$(cssClass).empty();
	//allCounts keep the node counts of all layers
	var allCounts = [inCount];
	var allCounts = allCounts.concat(hiddenCounts);
	allCounts.push(outCount);

	// if the height of an element is more than this,
	// set height to this value
	var maxHeightThreshold = 750;
	var minHeightThreshold = 50; 
	//to get min and max values of arrays
	Array.prototype.min = function() {
		  return Math.min.apply(null, this);
	};
	Array.prototype.max = function() {
		  return Math.max.apply(null, this);
	};

	var rectHeights = [];
	var rectColors = [];
	var minCount = allCounts.slice(1,allCounts.length-1).min();
	for(var i=0; i<allCounts.length; i++){
		rectHeights[i] = parseInt(allCounts[i]*100/minCount);
		if(rectHeights[i] > maxHeightThreshold){
			rectHeights[i] = maxHeightThreshold;
		}
		if(rectHeights[i] < minHeightThreshold){
			rectHeights[i] = minHeightThreshold;
		}
		if(i==0 || i == allCounts.length-1){
			rectColors[i] = "red";
		} else {
			rectColors[i] = "green";
		}
	}	

	var canvasWidth = 500;
	var spacingY = 10;

	//set the canvas size accordingly
	var canvasHeight;
	if(rectHeights.max()<maxHeightThreshold){
		canvasHeight = rectHeights.max() + (spacingY * 2);
	} else {
		canvasHeight = maxHeightThreshold;
	}

	//create the canvas
	var canvas = d3.select(cssClass)
					.append("svg")
					.attr("width", canvasWidth)
					.attr("height", canvasHeight);

	//creating shape elements (rectangles) to represent different layers
	var startX = 10;
	var widthRect = 50;
	var widthSpacing = 50;
	var currX = startX;
	for(var i=0; i<allCounts.length; i++){
		var posY = (canvasHeight - rectHeights[i])/2;
		var rect = canvas.append("rect")
				.attr("x", currX)
				.attr("y", posY)
				.attr("width", 50)
				.attr("height", rectHeights[i])
				.attr("fill", rectColors[i]);

		canvas.append("text")
		  .style("fill", "white")
		  .style("font-size", "25px")
		  .attr("dy", ".35em")
		  .attr("text-anchor", "middle")
		  .attr("transform", "translate(" + (currX + widthRect/2).toString() 
				  + "," + (posY + rectHeights[i]/2).toString() +") rotate(90)")
		  .text(allCounts[i].toString());
		currX = currX + widthRect + widthSpacing;
	}

	//to move background elements to the background
	d3.selection.prototype.moveToBack = function() { 
	    return this.each(function() { 
	        var firstChild = this.parentNode.firstChild; 
	        if (firstChild) { 
	            this.parentNode.insertBefore(this, firstChild); 
	        } 
	    }); 
	};
	
	//drawing the arrow which goes from inputs to outputs
	var arrowHeadWidth = 20;
	var arrowHeadHeight = 20;
	
	var line = canvas.append("line")
    			.attr("x1", startX + widthRect)
    			.attr("y1", canvasHeight/2)
    			.attr("x2", currX - widthRect - widthSpacing - arrowHeadWidth)
    			.attr("y2", canvasHeight/2)
    			.attr("stroke-width", 6)
    			.attr("stroke", "green");

	var arrowStartX = currX - widthRect - widthSpacing;
	var arrowStartY = canvasHeight/2;
	var pathString = "M " + arrowStartX.toString() + " " + arrowStartY.toString() + " "
	+ "L " + (arrowStartX - arrowHeadWidth).toString() + " " + (arrowStartY - (arrowHeadHeight/2)).toString() + " "
	+ "L " + (arrowStartX - arrowHeadWidth).toString() + " " + (arrowStartY + (arrowHeadHeight/2)).toString() + " "
	+ "L " + arrowStartX.toString() + " " + arrowStartY.toString();
	
	var arrowHead = canvas.append("svg:path")
    .attr("d",pathString)
    .style("stroke-width", 1)
    .style("stroke", "green")
    .style("fill", "green");

	line.moveToBack();
	arrowHead.moveToBack();
	
	//add header text
	var textPosY = rectHeights.max() + spacingY + 50;
	var fontSize = "15px";
	data = ["Inputs", "Hidden Layers", "Outputs"];

	//added Input text as two text elements because 
	//<br/> doesn't render in SVG
	var in1Text = canvas.append("text")
	  .attr("x", startX + widthRect/2)
	  .attr("y", textPosY)
	  .style("fill", "black")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text(data[0]);

	var in2Text = canvas.append("text")
	  .attr("x", startX + widthRect/2)
	  .attr("y", textPosY + 20)
	  .style("fill", "black")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text("(Features)");

	//added Output text as two text elements because 
	//<br/> doesn't render in SVG
	var out1Text = canvas.append("text")
	  .attr("x", currX - widthSpacing - widthRect/2)
	  .attr("y", textPosY)
	  .style("fill", "black")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text(data[2]);

	var out2Text = canvas.append("text")
	  .attr("x", currX - widthSpacing - widthRect/2)
	  .attr("y", textPosY + 20)
	  .style("fill", "black")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text("(Classes)");

	//hidden layer text  
	var hiddenTextPosX = (startX + widthRect/2 + (currX - widthSpacing - widthRect/2 - (startX + widthRect/2)))/2;
	var hiddenText = canvas.append("text")
	  .attr("x", hiddenTextPosX)
	  .attr("y", textPosY)
	  .style("fill", "black")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text(data[1]);

}

</script>

</body>
</html>
